#!/usr/bin/env python3
"""
Configuration Validation Script

This script validates the Atlas configuration and provides detailed guidance
for fixing any issues found.

Usage:
    python scripts/validate_config.py
    python scripts/validate_config.py --json  # Output in JSON format
    python scripts/validate_config.py --fix   # Provide fix commands only
"""

import argparse
import json
import sys
from pathlib import Path

# Add the project root to Python path
sys.path.insert(0, str(Path(__file__).parent.parent))

from helpers.config import load_config
from helpers.validate import ConfigValidator


def main():
    parser = argparse.ArgumentParser(description="Validate Atlas configuration")
    parser.add_argument(
        "--json", action="store_true", help="Output results in JSON format"
    )
    parser.add_argument("--fix", action="store_true", help="Show only fix commands")
    parser.add_argument(
        "--errors-only", action="store_true", help="Show only errors, not warnings"
    )
    parser.add_argument(
        "--quiet",
        "-q",
        action="store_true",
        help="Quiet mode - only output if there are issues",
    )

    args = parser.parse_args()

    try:
        # Load configuration
        config = load_config()

        # Validate configuration
        validator = ConfigValidator()
        errors, warnings = validator.validate_config(config)

        # Handle different output formats
        if args.json:
            output_json(errors, warnings)
        elif args.fix:
            output_fix_commands(errors, warnings, args.errors_only)
        else:
            output_report(validator, errors, warnings, args.errors_only, args.quiet)

        # Exit with appropriate code
        sys.exit(1 if errors else 0)

    except Exception as e:
        if args.json:
            print(json.dumps({"error": str(e)}, indent=2))
        else:
            print(f"‚ùå Error loading configuration: {e}")
        sys.exit(2)


def output_json(errors, warnings):
    """Output validation results in JSON format."""
    result = {
        "valid": len(errors) == 0,
        "errors": [
            {
                "field": error.field,
                "message": error.message,
                "severity": error.severity,
                "guidance": error.guidance,
                "fix_command": error.fix_command,
                "documentation_url": error.documentation_url,
            }
            for error in errors
        ],
        "warnings": [
            {
                "field": warning.field,
                "message": warning.message,
                "severity": warning.severity,
                "guidance": warning.guidance,
                "fix_command": warning.fix_command,
                "documentation_url": warning.documentation_url,
            }
            for warning in warnings
        ],
    }
    print(json.dumps(result, indent=2))


def output_fix_commands(errors, warnings, errors_only=False):
    """Output only the fix commands."""
    issues = errors if errors_only else errors + warnings

    if not issues:
        print("# No fix commands needed - configuration is valid!")
        return

    print("#!/bin/bash")
    print("# Atlas Configuration Fix Commands")
    print("# Generated by validate_config.py")
    print()

    for issue in issues:
        if issue.fix_command:
            print(f"# Fix for {issue.field}: {issue.message}")
            print(issue.fix_command)
            print()


def output_report(validator, errors, warnings, errors_only=False, quiet=False):
    """Output the full validation report."""
    if quiet and not errors and not warnings:
        return

    warnings_to_show = [] if errors_only else warnings

    if quiet and not errors:
        return

    report = validator.format_validation_report(errors, warnings_to_show)
    print(report)

    # Add summary statistics
    if not quiet:
        print("üìä Validation Summary:")
        print(f"   ‚Ä¢ Errors: {len(errors)}")
        print(f"   ‚Ä¢ Warnings: {len(warnings)}")

        if errors:
            print("   ‚Ä¢ Status: ‚ùå Configuration needs fixes")
        elif warnings:
            print("   ‚Ä¢ Status: ‚ö†Ô∏è  Configuration works but has recommendations")
        else:
            print("   ‚Ä¢ Status: ‚úÖ Configuration is optimal")


if __name__ == "__main__":
    main()
