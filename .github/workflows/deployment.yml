name: Atlas Production Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      dry_run:
        description: 'Dry run (no actual deployment)'
        required: false
        default: false
        type: boolean

jobs:
  # Pre-deployment Validation
  pre-deploy-check:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      ready: ${{ steps.check.outputs.ready }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check production readiness
      id: check
      run: |
        # Check if this is a tag or manual deployment
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          echo "Production deployment triggered by tag: ${{ github.ref_name }}"
          READY=true
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "Manual deployment to ${{ github.event.inputs.environment }}"
          READY=true
        else
          echo "Not a deployment trigger"
          READY=false
        fi

        # Check for required files
        if [[ ! -f "requirements.txt" || ! -f "config/database.yaml" ]]; then
          echo "❌ Missing required configuration files"
          READY=false
        fi

        echo "ready=${READY}" >> $GITHUB_OUTPUT

        if [[ "$READY" == "true" ]]; then
          echo "✅ Pre-deployment checks passed"
        else
          echo "❌ Pre-deployment checks failed"
          exit 1
        fi

  # Build Deployment Package
  build-package:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-deploy-check
    if: needs.pre-deploy-check.outputs.ready == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build Python package
      run: |
        python -m build --sdist --wheel --outdir dist/

    - name: Create deployment bundle
      run: |
        mkdir -p deployment-bundle

        # Copy essential files
        cp -r config/ deployment-bundle/
        cp -r systemd/ deployment-bundle/
        cp -r helpers/ deployment-bundle/
        cp requirements*.txt deployment-bundle/
        cp api.py deployment-bundle/
        cp standalone_monitoring_service.py deployment-bundle/

        # Copy data and logging structure (empty)
        mkdir -p deployment-bundle/{data,logs,temp}

        # Create deployment manifest
        cat > deployment-bundle/MANIFEST.txt << EOF
        Atlas Deployment Bundle
        =======================
        Version: ${{ github.ref_name }}
        Commit: ${{ github.sha }}
        Built: $(date -u)
        Environment: ${{ github.event.inputs.environment || 'production' }}

        Contents:
        - Configuration files
        - Systemd service definitions
        - Core application modules
        - Dependencies
        - Data and logging directories
        EOF

        # Create deployment package
        tar -czf atlas-deployment-${{ github.sha }}.tar.gz deployment-bundle/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-${{ github.sha }}
        path: |
          dist/
          atlas-deployment-${{ github.sha }}.tar.gz
          deployment-bundle/
        retention-days: 90

  # Security and Compliance Check
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-deploy-check
    if: needs.pre-deploy-check.outputs.ready == 'true'

    steps:
    - uses: actions/checkout@v4

    - name: Check for hardcoded secrets
      run: |
        # Basic secret detection
        if grep -rE "(password|secret|key|token)\s*=\s*[\"'].*[\"']" --include="*.py" --include="*.yaml" --include="*.yml" .; then
          echo "::warning::Potential hardcoded secrets found"
        fi

        # Check for API keys
        if grep -rE "(AIza|sk-|ghp_|gho_|ghu_|ghs_|ghr_)" --include="*.py" --include="*.yaml" --include="*.yml" .; then
          echo "::warning::Potential API keys found"
        fi

    - name: Check systemd service security
      run: |
        if [[ -d "systemd/" ]]; then
          echo "Checking systemd service configurations..."
          find systemd/ -name "*.service" -exec echo "Checking: {}" \;

          # Check for insecure settings
          if grep -r "User=root" systemd/; then
            echo "::warning::Services running as root detected"
          fi

          if grep -r "ProtectSystem=false" systemd/; then
            echo "::warning::System protection disabled in services"
          fi
        fi

    - name: Generate security report
      run: |
        cat > security-scan-report.md << EOF
        # Deployment Security Scan Report

        ## Scan Results
        - **Secret Detection**: Completed
        - **Systemd Security**: Completed
        - **File Permissions**: N/A (pre-deployment)

        ## Recommendations
        - Review any warnings above before deployment
        - Ensure proper environment variables are set
        - Verify service permissions match security requirements

        ## Deployment Status
        - **Ready**: Manual review required
        EOF

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report-${{ github.sha }}
        path: security-scan-report.md
        retention-days: 90

  # Generate Deployment Instructions
  generate-deployment-guide:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-package, security-scan]
    if: always()

    steps:
    - name: Generate deployment guide
      run: |
        cat > DEPLOYMENT_GUIDE.md << EOF
        # Atlas Deployment Guide

        ## Deployment Information
        - **Version**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Environment**: ${{ github.event.inputs.environment || 'production' }}
        - **Deployed At**: $(date -u)

        ## Prerequisites
        - Ubuntu 20.04/22.04 server
        - Python 3.9-3.12
        - systemd service manager
        - SQLite3
        - Network access for API endpoints

        ## Deployment Steps

        ### 1. Download Package
        \`\`\`bash
        # Download the deployment artifact from GitHub Actions
        # (Link available in Actions run)
        \`\`\`

        ### 2. Extract Package
        \`\`\`bash
        tar -xzf atlas-deployment-${{ github.sha }}.tar.gz
        cd deployment-bundle
        \`\`\`

        ### 3. Install Dependencies
        \`\`\`bash
        sudo apt-get update
        sudo apt-get install -y python3-pip sqlite3 ffmpeg

        pip3 install -r requirements.txt
        \`\`\`

        ### 4. Configure Environment
        \`\`\`bash
        cp .env.template .env
        # Edit .env with your configuration
        \`\`\`

        ### 5. Install Services
        \`\`\`bash
        sudo cp systemd/* /etc/systemd/system/
        sudo systemctl daemon-reload
        sudo systemctl enable atlas-api.service
        sudo systemctl enable atlas-monitoring-dashboard.service
        \`\`\`

        ### 6. Start Services
        \`\`\`bash
        sudo systemctl start atlas-api.service
        sudo systemctl start atlas-monitoring-dashboard.service
        \`\`\`

        ### 7. Verify Deployment
        \`\`\`bash
        # Check service status
        sudo systemctl status atlas-api.service
        sudo systemctl status atlas-monitoring-dashboard.service

        # Check API health
        curl http://localhost:17444/health

        # Check monitoring dashboard
        curl http://localhost:8081/health
        \`\`\`

        ## Service Endpoints
        - **API**: http://localhost:17444
        - **Monitoring Dashboard**: http://localhost:8081
        - **API Documentation**: http://localhost:17444/docs
        - **Monitoring Docs**: http://localhost:8081/docs

        ## Monitoring
        - Services auto-restart on failure
        - Logs available via journalctl
        - Metrics available via monitoring dashboard
        - Health checks every 60 seconds

        ## Troubleshooting
        \`\`\`bash
        # View logs
        sudo journalctl -u atlas-api.service -f
        sudo journalctl -u atlas-monitoring-dashboard.service -f

        # Restart services
        sudo systemctl restart atlas-api.service
        sudo systemctl restart atlas-monitoring-dashboard.service
        \`\`\`

        ## Security Notes
        - Services run as non-root user
        - System protections enabled
        - Resource limits configured
        - Network access restricted to localhost by default

        ## Support
        - Check logs for error messages
        - Verify configuration in .env
        - Ensure required ports are available
        - Monitor system resources
        EOF

    - name: Upload deployment guide
      uses: actions/upload-artifact@v4
      with:
        name: deployment-guide-${{ github.sha }}
        path: DEPLOYMENT_GUIDE.md
        retention-days: 90

  # Final Deployment Summary
  deployment-summary:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-deploy-check, build-package, security-scan, generate-deployment-guide]
    if: always()

    steps:
    - name: Generate deployment summary
      run: |
        cat > DEPLOYMENT_SUMMARY.md << EOF
        # Atlas Deployment Summary

        ## Deployment Status
        - **Pre-deploy Check**: ${{ needs.pre-deploy-check.result }}
        - **Build Package**: ${{ needs.build-package.result }}
        - **Security Scan**: ${{ needs.security-scan.result }}
        - **Deployment Guide**: ${{ needs.generate-deployment-guide.result }}

        ## Build Information
        - **Version**: ${{ github.ref_name }}
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Environment**: ${{ github.event.inputs.environment || 'production' }}
        - **Dry Run**: ${{ github.event.inputs.dry_run || 'false' }}

        ## Artifacts Generated
        - **Deployment Package**: deployment-package-${{ github.sha }}
        - **Security Report**: security-scan-report-${{ github.sha }}
        - **Deployment Guide**: deployment-guide-${{ github.sha }}

        ## Next Steps
        1. Download artifacts from this workflow run
        2. Review security scan report
        3. Follow deployment guide
        4. Monitor service health after deployment

        ## Links
        - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        - **Commit**: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
        EOF

        # Determine final status
        if [[ "${{ needs.pre-deploy-check.result }}" == "success" && \
              "${{ needs.build-package.result }}" == "success" ]]; then
          echo "" >> DEPLOYMENT_SUMMARY.md
          echo "## ✅ Deployment Package Ready" >> DEPLOYMENT_SUMMARY.md
          echo "The deployment package has been built and is ready for deployment." >> DEPLOYMENT_SUMMARY.md
        else
          echo "" >> DEPLOYMENT_SUMMARY.md
          echo "## ❌ Deployment Package Failed" >> DEPLOYMENT_SUMMARY.md
          echo "Review the failed jobs above before retrying." >> DEPLOYMENT_SUMMARY.md
        fi

    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary-${{ github.sha }}
        path: DEPLOYMENT_SUMMARY.md
        retention-days: 90

    - name: Display deployment summary
      run: |
        echo "=== Atlas Deployment Summary ==="
        echo "Version: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "Status: ${{ needs.pre-deploy-check.result }}"
        echo ""
        echo "Artifacts available in workflow run:"
        echo "- Deployment Package"
        echo "- Security Scan Report"
        echo "- Deployment Guide"
        echo "- Deployment Summary"
        echo ""
        echo "Download from: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"