name: Atlas CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 ffmpeg curl git

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-xdist pytest-benchmark memory-profiler

    - name: Set up environment
      run: |
        cp .env.test .env 2>/dev/null || echo "TESTING=true" > .env
        echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env
        mkdir -p data/test logs/test

    - name: Create test database
      run: |
        sqlite3 data/test/atlas_test.db "CREATE TABLE IF NOT EXISTS content (id INTEGER PRIMARY KEY, url TEXT, title TEXT, content TEXT, created_at TEXT, updated_at TEXT);"

    - name: Run tests
      timeout-minutes: 15
      run: |
        python -m pytest tests/ \
          -v --tb=short --timeout=300 \
          --cov=. --cov-report=xml --cov-report=term-missing \
          --dist=loadscope -n auto

    - name: Upload coverage reports
      if: success()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts-${{ matrix.python-version }}
        path: |
          data/test/
          logs/test/
        retention-days: 7

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run security scanning
      run: |
        pip install bandit safety
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install ruff pre-commit radon

    - name: Run code quality checks
      run: |
        ruff check . --output-format=github
        ruff format --check .
        mypy --ignore-missing-imports --no-error-summary . || true
        radon cc . -a -nb --json > complexity-report.json || true

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports-${{ github.run_number }}
        path: complexity-report.json
        retention-days: 30